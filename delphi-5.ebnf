(* Delphi 5 Grammar 
Everything is case-insensitive in delphi, thus, the EBNF will only show
lower-case letters.
*)

character = ? any character ?;

letter = 'a' | 'b' | 'c' | 'd' | 'e' | 'f'
       | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' 
       | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' 
       | 's' | 't' | 'u' | 'v' | 'w' | 'x' 
       | 'y' | 'z' ;   

digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

sign = '+' | '-';

integer = digit, { digit };

hexadecimal-digit = digit
                  | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' 
                  | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'
                  ;

hexadecimal = '$', hexadecimal-digit, { hexadecimal-digit };

real = integer, [ '.', integer ];

scientific = real, ('e' | 'E'), [ sign ], integer;

number = { sign }, ( integer | hexadecimal | real | scientific );

character-constant = '#', digit, { digit };

string = character-constant, { character-constant }
       | "'", { (character - "'") | "''" }, "'";

alphanumeric = digit | letter;

identifier = ('_' | letter), { '_' | alphanumeric };

identifier-list = identifier, { ',', identifier };

label-id = identifier | integer;

label-section = 'label', label-id;

unit-id = identifier;

qualified-identifier = [ unit-id, '.' ], identifier;

type-id = [ unit-id, '.' ], identifier;

class-visibility = 'public'
                 | 'protected'
                 | 'private'
                 | 'published'
                 ;

constant = number
         | string
         | 'True'
         | 'False';

property-specifiers = [ 'index', const-expr ]
                    , [ 'read', identifier ]
                    , [ 'write', identifier ]
                    , [ 'stored', (identifier | constant) ]
                    , [ ('default', const-expr) | 'nodefault' ]
                    , [ 'implements', type-id ]
                    ;

property-parameter-list = '['
                        , identifier-list
                        , ':'
                        , type-id
                        , ';'
                        , { identifier-list, ':', type-id }
                        , ']'
                        ;

property-interface = [ property-parameter-list ]
                   , ':'
                   , identifier
                   ;

property-list = 'property'
              , identifier
              , [ property-interface ]
              , property-specifiers
              ;

class-property = [ class-visibility ]
               , property-list
               , ';'
               ;

class-property-list = class-property, { class-property };

interface-heritage = '(', identifier-list, ')';

class-heritage = '(', identifier-list, ')';

class-field = [ class-visibility ]
            , object-field-list
            , ';'
            ;

class-field-list = class-field, { class-field };

class-method = [ class-visibility ]
             , method-list
             , ';'
             ;

class-method-list = class-method, { class-method };

interface-type = 'interface'
               , [ interface-heritage ],
               , [ class-method-list ]
               , [ class-property-list ]
               , 'end'
               ;

class-type = 'class'
           , [ class-heritage ]
           , class-field-list
           , class-method-list
           , class-property-list
           , 'end'
           ;

ordinal-identifier = 'shortint'
                   | 'smallint'
                   | 'integer'
                   | 'byte'
                   | 'longint'
                   | 'int64'
                   | 'word'
                   | 'boolean'
                   | 'char'
                   | 'widechar'
                   | 'longword'
                   | 'pchar'
                   ;

subrange-type = constant-expression, '..', constant-expression;

enumerated-type = '(', identifier-list, ')';

ordinal-type = subrange-type
             | enumerated-type
             | ordinal-identifier
             ;

real-type = 'real48'
          | 'real'
          | 'single'
          | 'double'
          | 'extended'
          | 'currency'
          | 'comp'
          ;

simple-type = ordinal-type
            | real-type
            ;

array-type = 'array'
           , [ '[', ordinal-type, { ',', ordinal-type }, ']' ]
           , 'of'
           , type
           ;

record-variant = constant-expression, ',', { constant-expression, ',' }
               , ':'
               , '(', [ field-list ], ')'
               ;

variant-section = 'case'
                , [ identifier, ':' ]
                , type-id
                , 'of'
                , record-variant, ';', { record-variant, ';' }
                ;

field-declaration = identifier-list, ':', type;

field-list = field-declaration, ';', { field-declaration, ';' }
           , [ variant-section ]
           , ';'
           ;

record-type = 'record', [ field-list ], 'end';

set-type = 'set', 'of', ordinal-type;

file-type = 'file', 'of', type-id;

struct-type = [ 'packed' ]
            , ( array-type | set-type | file-type | record-type );

pointer-type = '^', type-id;

string-type = 'string'
            | 'ansistring'
            | 'widestring'
            | 'string', '[', constant-expression, ']'
            ;

variant-type = 'variant'
             | 'olevariant'
             ;

class-reference-type = 'class', 'of', type-id;

parameter = identifier-list, [ ':', ([ 'array', 'of' ], simple-type | 'string' | 'file') ] ]
          | identifier, ':', simple-type, '=', constant-expression
          ;

formal-parameter = [ 'var' | 'const' | 'out' ], parameter;

formal-parameters = '('
                  , formal-parameter, ';', { formal-parameter, ';' }
                  , ')'
                  ;

procedure-heading = 'procedure', identifier, [ formal-parameters ];

function-heading = 'function', identifier, [ formal-parameters ], ':', (simple-type | 'string');

procedure-type = ( procedure-heading | function-heading )
               , [ 'of', 'object' ]
               ;

type = type-id
     | simple-type
     | struct-type
     | pointer-type
     | string-type
     | procedure-type
     | variant-type
     | class-reference-type
     ;


object-heritage = '(', qualified-identifier, ')';

object-field-list = identifier-list, ':', type, ';'
                  , { identifier-list, ':', type, ';' }
                  ;

constructor-heading = 'constructor', identifier, [ formal-parameters ];

constructor-heading = 'destructor', identifier, [ formal-parameters ];

method-heading = procedure-heading
               | function-heading
               | constructor-heading
               | destructor-heading
               ;

method-list = method-heading, [ ';', 'virtual' ], ';'
            | { method-heading, [ ';', 'virtual' ], ';' }
            ;

object-type = 'object'
            , [ object-heritage ]
            , [ object-field-list ]
            , [ method-list ]
            , 'end'
            ;

restricted-type = object-type
                | class-type
                | interface-type
                ;

type-declaration = identifier, '=', type
                 | identifier, '=', restricted-type
                 ;

type-section = 'type', type-declaration, ';', { type-declaration, ';' };

array-constant = '('
               , typed-constant, ',', { typed-constant, ',' }
               , ')';

record-field-constant = identifier, ':', typed-constant;

record-constant = '('
                , record-field-constant, ';', { record-field-constant, ';' }
                , ')';

typed-constant = constant-expression
               | array-constant
               | record-constant
               ;

constant-declaration = identifier, '=', constant-expression
                     | identifier, ':', type-id, '=', typed-constant;

const-section = 'const'
              , constant-declaration, ';'
              , { constant-declaration, ';' }
              ;

var-declaration = identifier-list
                , ':'
                , type
                , [ ('absolute', (identifier | constant-expression))
                  | '=', constant-expression 
                  ]
                ;

var-section = 'var'
            , var-declaration, ';', { var-declaration, ';' }
            ;

directive = 'cddecl'
          | 'register'
          | 'dynamic'
          | 'virtual'
          | 'export'
          | 'external'
          | 'far'
          | 'forward'
          | 'message'
          | 'override'
          | 'overload'
          | 'pascal'
          | 'reintroduce'
          | 'safecall'
          | 'stdcall'
          ;

procedure-declaration = procedure-heading, ';', [ directive ]
                      , block
                      , ';'
                      ;

function-declaration = function-heading, ';',  [ directive ]
                     , block
                     , ';'
                     ;
                     
procedure-section = procedure-declaration
                  | function-declaration
                  ;

declaration-section = label-section
                    | const-section
                    | type-section
                    | var-section
                    | procedure-section
                    ;

rel-op = '>'
       | '<'
       | '<='
       | '>='
       | '<>'
       | 'IN'
       | 'IS'
       | 'AS'
       ;

add-op = '+'
       | '-'
       | 'or'
       | 'xor'
       ;

mul-op = '*'
       | '/'
       | 'div'
       | 'mod'
       | 'and'
       | 'shl'
       | 'shr'
       ;

set-constructor = '[', [ set-element, { ',', set-element } ], ']';

set-element = expression, [ '..', expression ];

factor = designator, [ '(', expression-list, ')' ]
       | "''", designator
       | number
       | string
       | 'nil'
       | '(', expression, ')'
       | 'not', factor
       | set-constructor
       | type-id, '(', expression, ')'
       ;

term = factor
     , [ mul-op, factor ]
     , { [ mul-op, factor ] };

simple-expression = [ '+' | '-' ]
                  , term
                  , [ add-op, term ], { [ add-op, term ] }
                  ;

expression = simple-expression
           , [ rel-op, simple-expression ], { [ rel-op, simple-expression ] }
           ;

constant-expression = expression; (* review: write a proper way to handle constant-expressions *)

expression-list = expression, { ',', expression };

designator = qualified-identifier
           , [ '.', identifier | '[', expression-list, ']' | '^' ]
           , { [ '.', identifier | '[', expression-list, ']' | '^' ] }           
           ;

simple-statement = designator, [ '(', expression-list, ')' ]
                 | designator, ':=', expression
                 | 'inherited'
                 | 'goto', label-id
                 ;

if-statement = 'if'
             , expression
             , 'then'
             , statement
             , [ 'else', statement ]
             ;

case-label = constant-expression, [ '..', constant-expression ];

case-selector = case-label, { ',', case-label }, ':', statement;

case-statement = 'case'
               , expression
               , 'of'
               , case-selector, { ';', case-selector }
               , 'else'
               , statement
               , [ ';' ]
               , 'end'
               ;

condition-statement = if-statement
                    | case-statement
                    ;

repeat-statement = 'repeat', statement, 'until', expression;

while-statement = 'while', expression, 'do', statement;

for-statement = 'for'
              , qualified-identifier
              , ':='
              , expression
              , ('to' | 'downto')
              , expression
              , 'do'
              , statement
              ;

loop-statement = repeat-statement
               | while-statement
               | for-statement
               ;

with-statement = 'with', identifier-list, 'do', statement;

structured-statement = compound-statement
                     | conditional-statement
                     | loop-statement
                     | with-statement
                     ;

statement = [ label-id, ':' ], [ simple-statement | structured-statement ]; (* review: this can make an empty statement, and this is illegal *)

statement-list = statement, ';', { statement, ';' };

compound-statement = 'begin', statement-list, 'end';

block = [ declaration-section ]
      , compound-statement;

uses-clause = 'uses'
            , identifier-list
            , ';'
            ;

program-block = [ uses-clause ]
              , block
              ;

init-section = 'initialization', statement-list , [ 'finalization', statement-list ], 'end'
             | 'begin', statement-list, 'end'
             | 'end'
             ;

implementation-section = 'implementation'
                       , [ uses-clause ]
                       , { declaration-section }
                       ;

exported-heading = procedure-heading, ';', [ directive ]
                 | function-heading, ';', [ directive ]
                 ;

interface-declaration = const-section
                      | type-section
                      | var-section
                      | exported-heading
                      ;

interface-section = 'interface'
                  , [ uses-clause ]
                  , { interface-declaration }
                  ;

unit = 'unit', identifier, ';'
     , interface-section
     , implementation-section
     , init-section
     ;

program = [ 'program', identifier, [ '(', identifier-list , ')' ], ';' ]
        , program-block
        , '.'
        ;

library = 'library', identifier, ';'
        , program-block
        , '.'
        ;

requires-clause = 'requires'
                , identifier-list
                , ';'
                ;

contains-clause = 'contains'
                , identifier-list
                , ';'
                ;

package = 'package', identifier, ';'
        , [ requires-clause ]
        , [ contains-clause ]
        , 'end'
        , '.'
        ;

goal = program
     | package
     | library
     | unit
     ;