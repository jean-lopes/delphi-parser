(* Delphi 5 Grammar *)

character = ? any character ?;

upper-case-letter = 'A' | 'B' | 'C' | 'D' | 'E' | 'F'
                  | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' 
                  | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' 
                  | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' 
                  | 'Y' | 'Z' ;

lower-case-letter = 'a' | 'b' | 'c' | 'd' | 'e' | 'f'
                  | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' 
                  | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' 
                  | 's' | 't' | 'u' | 'v' | 'w' | 'x' 
                  | 'y' | 'z' ;                  

letter = lower-case-letter | upper-case-letter;

digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';

sign = '+' | '-';

integer = digit, { digit };

hexadecimal-digit = digit
                  | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' 
                  | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'
                  ;

hexadecimal = '$', hexadecimal-digit, { hexadecimal-digit };

real = integer, [ '.', integer ];

scientific = real, ('e' | 'E'), [ sign ], integer;

number = { sign }, ( integer | hexadecimal | real | scientific );

character-constant = #, digit, { digit };

string = character-constant, { character-constant }
       | "'", { character - "'" }, "'"; (* this is wrong :( *)

alphanumeric = digit | letter;

identifier = ('_' | letter), { '_' | alphanumeric };

identifier-list = identifier, { ',', identifier };

label-id = identifier | integer;

unit-id = identifier;

qualified-identifier = [ unit-id, '.' ], identifier;

type-id = [ unit-id, '.' ], identifier;

requires-clause = 'requires'
                , identifier-list
                , ';'
                ;

contains-clause = 'contains'
                , identifier-list
                , ';'
                ;

interface-heritage = '('
                   , identifier-list
                   , ')'
                   ;

class-visibility = 'public'
                 | 'protected'
                 | 'private'
                 | 'published'
                 ;

property-specifiers = [ 'index', const-expr ]
                    , [ 'read', identifier ]
                    , [ 'write', identifier ]
                    , [ 'stored', (identifier | <<<constant>>>) ]
                    , [ ('default', const-expr) | 'nodefault' ]
                    , [ 'implements', type-id ]
                    ;

property-parameter-list = '['
                        , identifier-list
                        , ':'
                        , type-id
                        , ';'
                        , { identifier-list, ':', type-id }
                        , ']'
                        ;

property-interface = [ property-parameter-list ]
                   , ':'
                   , identifier
                   ;

property-list = 'property'
              , identifier
              , [ property-interface ]
              , property-specifiers
              ;

class-property = [ class-visibility ]
               , property-list
               , ';'
               ;

class-property-list = class-property, { class-property };

class-heritage = '(', identifier-list, ')';

--------------------------------------------------------------------------------
class-field = [ class-visibility ]
            , <<<object-field>>>
            , ';'
            ;

class-field-list = class-field, { class-field };

class-method = [ class-visibility ]
             , <<<method-list>>>
             , ';'
             ;

class-method-list = class-method, { class-method };

interface-type = 'interface'
               , [ interface-heritage ],
               , [ class-method-list ]
               , [ class-property-list ]
               , 'end'
               ;

class-type = 'class'
           , [ class-heritage ]
           , class-field-list
           , class-method-list
           , class-property-list
           , 'end'
           ;